Dungeon Fight architectural notes

Game sequence alternates between world and combat modes. In explore and combat modes. In explore mode, the user inputs movement commands and, where enemies are present, can opt to attack them. (Party management is to be completely ignored for the moment.) In combat mode, the player inputs a command for each party member, and then party and enemy actions are resolved at once.

The most obvious way to handle the two modes is for each to implement a loop, with a top-level control context which notices when combat has ended and hands control back to the explore loop. In fact, the entire combat loop can probably exist within a single combat(party, enemy) command or something. 

So we can have an ExploreMode which loads a map and places the user into it, and maintains any other information necessary. CombatMode handles the combat loop. Game would be the top level, for now, and is mostly responsible for setting up ExploreMode.

COMMAND INTERPRETATION

Break input on whitespace and pass the result to an interpreter class. What happens then depends on how complicated we want to get: we could pass back a command object which has the ability to execute the action; this would help with undo, but undo isn't relevant to this kind of game anyway. ...it makes more sense to send back a command object which has metadata about the command the user ultimately requested. This gives the interpreter responsibility for syntax, synonyms, and so on; it just has to map the user input to a concrete action. This means it has to know about every action in the game, but so what?

COMBAT

Let's go with a system where passing an object into a factory generates a skill action associated with a string. Type the minimum letters which unambiguously match that string and you're good to go for that character. The second word of the command should be the target enemy. For instance, given a) an orc and b) a wolf, and you have the powers "slash", "stab", and "herb", the command "sl a" slashes the orc; "st b" stabs the wolf; "s a" is ambiguous and gives an error; and "h" unambiguously uses the herb. 
